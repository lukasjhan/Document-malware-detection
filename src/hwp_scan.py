import olefile
import sys
import re
import zlib
import os
import json
import shutil

from tags import tag_table, control_char_table
from record import Record, HwpStream
from scanner import ShellCodeScanner, EntropyCalculator
from report import Report

class HwpFile:
    def __init__(self, filename, fix=False):
        self.fix = fix
        self.filename = filename
        self.hwp = olefile.OleFileIO(filename)
        self.data = dict()
        self.parsed_data = []

    def extract(self, decompress=True, infile=False):
        storage_stream_list = self.hwp.listdir()
        dir_path = 'extract_' + self.filename
        encrypted_storages = ['BodyText', 'BinData', 'DocHistory', 'DocInfo']

        if os.path.isdir(dir_path) == False and infile:
            os.makedirs(dir_path)

        for data in storage_stream_list:
            if len(data) == 2:
                storage = os.path.join(dir_path, data[0])
                if os.path.isdir(storage) == False and infile:
                    os.makedirs(storage)

                stream_path = os.path.join(storage, data[1])
            else:
                if data[0] == '\x05HwpSummaryInformation': # process special name
                    stream_path = os.path.join(dir_path, '0x05HwpSummaryInformation')
                else:
                    stream_path = os.path.join(dir_path, data[0])

            stream_data = self.hwp.openstream(data).read() #bytes

            if data[0] in encrypted_storages and decompress:
                zlibobj = zlib.decompressobj(-zlib.MAX_WBITS)
                stream_data = zlibobj.decompress(stream_data)

            self.data['/'.join(data)] = stream_data
            if infile:
                with open(stream_path, 'wb') as stream:
                    stream.write(stream_data)

    def parse(self):
        if len(self.data) == 0:
            return

        for key in self.data.keys():
            stream = key.split('/')
            if stream[0] == 'BodyText':
                stream = HwpStream(self.data[key])
                parsed_stream = Record.build_tree_from_stream(stream) #parse into record!
                self.parsed_data.append(parsed_stream)

    def scan(self):
        def travel(record, report, dump):
            if record.payload and len(record.payload) > 0xfff: 
                result = ShellCodeScanner(record.payload).scan()
                if result:
                    report.append(result) #scan
                    dump.append(record.payload) # dump binary data
            for child in record.children:
                travel(child, report, dump)
        
        self.report = []
        self.dump = []
        for pdata in self.parsed_data:
            travel(pdata, self.report, self.dump)
    
    def write_dump(self):
        if len(self.dump) == 0:
            return

        if os.path.isdir('Dump') == False:
            os.makedirs('Dump')
        
        num = 1
        for d in self.dump:
            filename = 'Dump%d.bin' % num
            path = os.path.join('Dump', filename)
            with open(path, 'wb') as f:
                f.write(d)
            num += 1
    
    def write_report(self):
        if len(self.report) == 0:
            return
        
        report_file_name = self.filename + '_scan_result.json'
        report = Report('shell code detect', '10', self.report[0], '/Dump/', self.report)
        report.to_json_file(report_file_name)

    def cdr(self):
        if self.fix == False:
            return

        #copy file
        new_file_name = 'out_' + self.filename
        shutil.copy2(self.filename, new_file_name)
        new_hwp = olefile.OleFileIO(new_file_name, write_mode=True)
        comobj = zlib.compressobj(-zlib.MAX_WBITS)

        for d in self.dump:
            storage_stream_list = new_hwp.listdir()
            for l in storage_stream_list:
                if l[0] == 'BodyText':
                    stream_data = new_hwp.openstream(l).read()
                    match = re.search(d, stream_data)
                    if match is None: #not found
                        continue
                    else: #found
                        # delete shellcode and save
                        stream_data_array = bytearray(stream_data)
                        index = match.start() - 8 # 8 is header size
                        for _ in range(8 + len(d)):
                            del stream_data_array[index]
                        new_hwp.write_stream(l, comobj.compress(bytes(stream_data_array)))

def print_usage():
    print('usage: python hwp_scan [extract|scan] hwp_file_name')
    print('       python hwp_scan extract {--decompress} hwp_file_name')
    print('       python hwp_scan scan {--fix} hwp_file_name')

if __name__ == "__main__":
    if len(sys.argv) > 4 or len(sys.argv) <= 2:
        print_usage()
        sys.exit(-1)
    elif len(sys.argv) == 3:
        command = sys.argv[1]
        filename = sys.argv[2]

        if command == 'extract':
            hwpfile = HwpFile(filename)
            hwpfile.extract(infile=True, decompress=False)

        elif command == 'scan':
            hwpfile = HwpFile(filename)
            hwpfile.extract()
            hwpfile.parse()
            hwpfile.scan()
            hwpfile.write_report()
            hwpfile.write_dump()

        else: # unknown
            print_usage()
            sys.exit(-1)

    elif len(sys.argv) == 4:
        command = sys.argv[1]
        option = sys.argv[2]
        filename = sys.argv[3]
        
        if command == 'extract':
            if option == '--decompress':
                hwpfile = HwpFile(filename)
                hwpfile.extract(infile=True)
            else:
                print_usage()
                sys.exit(-1)

        elif command == 'scan':
            if option == '--fix':
                hwpfile = HwpFile(filename)
                hwpfile.extract()
                hwpfile.parse()
                hwpfile.scan()
                hwpfile.write_report()
                hwpfile.write_dump()
                hwpfile.cdr()
            else:
                print_usage()
                sys.exit(-1)

        else: # unknown
            print_usage()
            sys.exit(-1)
    