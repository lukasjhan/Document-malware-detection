import re
import array, math

class EntropyCalculator:
    def __init__(self, bin_data):
        self.bin_data = bin_data

    def entropy_frequency(self):
        ''' entropy > 7 or frequency[0] / sum(frequency) > 0.2 ==> Suspicious! '''
        if len(self.bin_data) == 0:
            return 0.0

        occurences = array.array('L', [0]*256)
        frequency = list(occurences)
        frequency.sort()
        frequency.reverse()
        fre_ratio = (frequency[:10], sum(frequency))

        for x in self.bin_data:
            occurences[ord(x)] += 1

        entropy = 0

        for x in occurences:
            if x:
                p_x = float(x) / len(self.bin_data)
                entropy -= p_x * math.log(p_x, 2)

        return entropy, fre_ratio

    def is_suspicious(self):
        entropy, fre_ratio = self.entropy_frequency()
        return entropy > 7 or (sum(fre_ratio[0][:4]) / fre_ratio[1]) > 0.7


class ShellCodeScanner:
    def __init__(self, bin_data):
        self.bin_data = bin_data

    def scan(self):
        shellcode_presence = []

        match = re.search(b'CreateFile',self.bin_data)
        if match is not None:
            shellcode_presence.append("Detect presence of CreateFile at offset:{0}".format(hex(match.start())))

        match = re.search(b'GetProcAddress',self.bin_data)
        if match is not None:
            shellcode_presence.append("Detect presence of GetProcAddress at offset:{0}".format(hex(match.start())))

        match = re.search(b'LoadLibrary',self.bin_data)
        if match is not None:
            shellcode_presence.append("Detect presence of LoadLibrary at offset:{0}".format(match.start()))

        match = re.search(b'WinExec',self.bin_data)
        if match is not None:
            shellcode_presence.append("Detect presence of WinExec at offset:{0}".format(hex(match.start())))

        match = re.search(b'GetSystemDirectoryA',self.bin_data)
        if match is not None:
            shellcode_presence.append("Detect presence of GetSystemDirectoryA at offset:{0}".format(hex(match.start())))

        match = re.search(b'WriteFile',self.bin_data)
        if match is not None:
            shellcode_presence.append("Detect presence of WriteFile at offset:{0}".format(hex(match.start())))

        match = re.search(b'ShellExecute',self.bin_data)
        if match is not None:
            shellcode_presence.append("Detect presence of ShellExecute at offset:{0}".format(hex(match.start())))

        match = re.search(b'GetWindowsDirectory',self.bin_data)
        if match is not None:
            shellcode_presence.append("Detect presence of GetWindowsDirectory at offset:{0}".format(hex(match.start())))

        match = re.search(b'UrlDownloadToFile',self.bin_data)
        if match is not None:
            shellcode_presence.append("Detect presence of UrlDownloadToFile at offset:{0}".format(hex(match.start())))
            
        match = re.search(b'IsBadReadPtr',self.bin_data)
        if match is not None:
            shellcode_presence.append("Detect presence of IsBadReadPtr at offset:{0}".format(hex(match.start())))
            
        match = re.search(b'IsBadWritePtr',self.bin_data)
        if match is not None:
            shellcode_presence.append("Detect presence of IsBadWritePtr at offset:{0}".format(hex(match.start())))
            
        match = re.search(b'CloseHandle',self.bin_data)
        if match is not None:
            shellcode_presence.append("Detect presence of CloseHandle at offset:{0}".format(hex(match.start())))
            
        match = re.search(b'ReadFile',self.bin_data)
        if match is not None:
            shellcode_presence.append("Detect presence of ReadFile at offset:{0}".format(hex(match.start())))
            
        match = re.search(b'SetFilePointer',self.bin_data)
        if match is not None:
            shellcode_presence.append("Detect presence of SetFilePointer at offset:{0}".format(hex(match.start())))
            
        match = re.search(b'VirtualAlloc',self.bin_data)
        if match is not None:
            shellcode_presence.append("Detect presence of VirtualAlloc at offset:{0}".format(hex(match.start())))

        match = re.search(b'VirtualAlloc',self.bin_data)
        if match is not None:
            shellcode_presence.append("Detect presence of VirtualAlloc at offset:{0}".format(hex(match.start())))


        match = re.search(b'\x64\x8b\x64',self.bin_data)
        if match is not None:
            shellcode_presence.append(("FS:[00] Shellcode at offset:{0}".format(hex(match.start())), match.start()))

        match = re.search(b'\x64\xa1\x00',self.bin_data)
        if match is not None:
            shellcode_presence.append(("FS:[00] Shellcode at offset:{0}".format(hex(match.start())), match.start()))


        match = re.search(b'\x64\xa1\x30',self.bin_data)
        if match is not None:
            shellcode_presence.append(("FS:[30h] Shellcode at offset:{0}".format(hex(match.start())), match.start()))

        match = re.search(b'\x64\x8b\x15\x30',self.bin_data)
        if match is not None:
            shellcode_presence.append(("FS:[30h] Shellcode at offset:{0}".format(hex(match.start())), match.start()))

        match = re.search(b'\x64\x8b\x31',self.bin_data)
        if match is not None:
            shellcode_presence.append(("FS:[30h] Shellcode at offset:{0}".format(hex(match.start())), match.start()))

        match = re.search(b'\x64\x8b\x35\x30',self.bin_data)
        if match is not None:
            shellcode_presence.append(("FS:[30h] Shellcode at offset:{0}".format(hex(match.start())), match.start()))

        match = re.search(b'\x64\x8b\x3d\x30',self.bin_data)
        if match is not None:
            shellcode_presence.append(("FS:[30h] Shellcode at offset:{0}".format(hex(match.start())), match.start()))

        match = re.search(b'\x64\x8b\x40\x30',self.bin_data)
        if match is not None:
            shellcode_presence.append(("FS:[30h] Shellcode at offset:{0}".format(hex(match.start())), match.start()))

        match = re.search(b'\x8b\x40\x0c',self.bin_data)
        if match is not None:
            shellcode_presence.append(("EAX [EAX+0x0c] Shellcode at offset:{0}".format(hex(match.start())), match.start()))

        match = re.search(b'\x8b\x70\x1c',self.bin_data)
        if match is not None:
            shellcode_presence.append(("EAX [EAX+0x1c] Shellcode at offset:{0}".format(hex(match.start())), match.start()))

        match = re.search(b'\x8b\x40\x08',self.bin_data)
        if match is not None:
            shellcode_presence.append(("EAX [EAX+0x08] Shellcode at offset:{0}".format(hex(match.start())), match.start()))
        
        match = re.search(b'\x64\x8b\x76\x18',self.bin_data)
        if match is not None:
            shellcode_presence.append(("ESI [ESI+0x18] Shellcode at offset:{0}".format(hex(match.start())), match.start()))
        

        match = re.search(b'\x55\x8b\xec\x83\xc4',self.bin_data)
        if match is not None:
            shellcode_presence.append(("Call Prolog at offset:{0}".format(hex(match.start())), match.start()))

        match = re.search(b'\x55\x8b\xec\x81\xec',self.bin_data)
        if match is not None:
            shellcode_presence.append(("Call Prolog at offset:{0}".format(hex(match.start())), match.start()))

        match = re.search(b'\x55\x8b\xec\xe8',self.bin_data)
        if match is not None:
            shellcode_presence.append(("Call Prolog at offset:{0}".format(hex(match.start())), match.start()))

        match = re.search(b'\x55\x8b\xec\xe9',self.bin_data)
        if match is not None:
            shellcode_presence.append(("Call Prolog at offset:{0}".format(hex(match.start())), match.start()))
            
        match = re.search(b'\x55\x8b\xec\x83\xc4',self.bin_data)
        if match is not None:
            shellcode_presence.append(("Call Prolog at offset:{0}".format(hex(match.start())), match.start()))

        match = re.search(b'\x55\x8b\xec\x81\xec',self.bin_data)
        if match is not None:
            shellcode_presence.append(("Call Prolog at offset:{0}".format(hex(match.start())), match.start()))

        match = re.search(b'\x55\x8b\xec\xe8',self.bin_data)
        if match is not None:
            shellcode_presence.append(("Call Prolog at offset:{0}".format(hex(match.start())), match.start()))

        match = re.search(b'\x55\x8b\xec\xe9',self.bin_data)
        if match is not None:
            shellcode_presence.append(("Call Prolog at offset:{0}".format(hex(match.start())), match.start()))
            
        match = re.search(b'\x90\x90\x90\x90',self.bin_data)
        if match is not None:
            shellcode_presence.append(("NOP Slide:{0}".format(hex(match.start())), match.start()))

        match = re.search(b'\x08\x08\x08\x08',self.bin_data)
        if match is not None:
            shellcode_presence.append(("NOP Slide:{0}".format(hex(match.start())), match.start()))

        match = re.search(b'\x09\x09\x09\x09',self.bin_data)
        if match is not None:
            shellcode_presence.append(("NOP Slide:{0}".format(hex(match.start())), match.start()))

        match = re.search(b'\x0c\x0c\x0c\x0c',self.bin_data)
        if match is not None:
            shellcode_presence.append(("NOP Slide:{0}".format(hex(match.start())), match.start()))

        match = re.search(b'\x0d\x0d\x0d\x0d',self.bin_data)
        if match is not None:
            shellcode_presence.append(("NOP Slide:{0}".format(hex(match.start())), match.start()))
            
        match = re.search(b'\xd9\xee\xd9\x74\x24\xf4',self.bin_data)
        if match is not None:
            shellcode_presence.append(("Call Pop Signature:{0}".format(hex(match.start())), match.start()))
            
        match = re.search(b'\xe8\x00\x00\x00\x00\x58',self.bin_data)
        if match is not None:
            shellcode_presence.append(("Call Pop Signature:{0}".format(hex(match.start())), match.start()))
            
        match = re.search(b'\xe8\x00\x00\x00\x00\x59',self.bin_data)
        if match is not None:
            shellcode_presence.append(("Call Pop Signature:{0}".format(hex(match.start())), match.start()))
            
        match = re.search(b'\xe8\x00\x00\x00\x00\x5a',self.bin_data)
        if match is not None:
            shellcode_presence.append(("Call Pop Signature:{0}".format(hex(match.start())), match.start()))

        match = re.search(b'\xe8\x00\x00\x00\x00\x5e',self.bin_data)
        if match is not None:
            shellcode_presence.append(("Call Pop Signature:{0}".format(hex(match.start())), match.start()))
            
        match = re.search(b'\xe8\x00\x00\x00\x00\x5f',self.bin_data)
        if match is not None:
            shellcode_presence.append(("Call Pop Signature:{0}".format(hex(match.start())), match.start()))
            
        match = re.search(b'\xe8\x00\x00\x00\x00\x5d',self.bin_data)
        if match is not None:
            shellcode_presence.append(("Call Pop Signature:{0}".format(hex(match.start())), match.start()))
            
        match = re.search(b'\xd9\xee\xd9\x74\x24\xf4',self.bin_data)
        if match is not None:
            shellcode_presence.append(("Fldz Signature:{0}".format(hex(match.start())), match.start()))
            
        match = re.search(b'\xac\xd0\xc0\xaa',self.bin_data)
        if match is not None:
            shellcode_presence.append(("LODSB/STOSB ROL decryption:{0}".format(hex(match.start())), match.start()))
            
        match = re.search(b'\xac\xd0\xc8\xaa',self.bin_data)
        if match is not None:
            shellcode_presence.append(("LODSB/STOSB ROR decryption:{0}".format(hex(match.start())), match.start()))
            
        match = re.search(b'\x66\xad\x66\x35',self.bin_data)
        if match is not None:
            start_shcod = match.start()
            if ( self.bin_data[start_shcod+6] == 0x66 and
                self.bin_data[start_shcod+7] == 0xAB ):
                    shellcode_presence.append(("LODSW/STOSW XOR decryption signature:{0}".format(hex(start_shcod)), match.start()))
            
        match = re.search(b'\x66\xad\x66\x05',self.bin_data)
        if match is not None:
            start_shcod = match.start()
            if ( self.bin_data[start_shcod+6] == 0x66 and
                self.bin_data[start_shcod+7] == 0xAB ):
                    shellcode_presence.append(("LODSW/STOSW ADD decryption signature:{0}".format(hex(start_shcod)), match.start()))
            
        match = re.search(b'\x66\xad\x66\x2d',self.bin_data)
        if match is not None:
            start_shcod = match.start()
            if ( self.bin_data[start_shcod+6] == 0x66 and
                self.bin_data[start_shcod+7] == 0xAB ):
                    shellcode_presence.append(("LODSW/STOSW SUB decryption signature:{0}".format(hex(start_shcod)), match.start()))
        
        match = re.search(b'\xac\xc0\xc0',self.bin_data)
        if match is not None:
            start_shcod = match.start()
            if ( self.bin_data[start_shcod+4] == 0xAA ):
                shellcode_presence.append(("LODSB/STOSB ROL decryption signature:{0}".format(hex(start_shcod)), match.start()))           
                
        match = re.search(b'\xac\xc0\xc8',self.bin_data)
        if match is not None:
            start_shcod = match.start()
            if ( self.bin_data[start_shcod+4] == 0xAA ):
                shellcode_presence.append(("LODSB/STOSB ROR decryption signature:{0}".format(hex(start_shcod)), match.start()))
            
        for match in re.finditer(b'\xac\x34',self.bin_data):
            start_shcod = match.start()
            if ( self.bin_data[start_shcod+3] == 0xAA ):
                shellcode_presence.append(("LODSB/STOSB XOR decryption signature:{0}, XOR Key:{1}".format(hex(start_shcod), 
                    hex(self.bin_data[start_shcod+2])), match.start()))
                
        for match in re.finditer(b'\xac\x04',self.bin_data):
            start_shcod = match.start()
            if ( self.bin_data[start_shcod+3] == 0xAA ):
                shellcode_presence.append(("LODSB/STOSB ADD decryption signature:{0}, ADD Key:{1}".format(hex(start_shcod), 
                    hex(self.bin_data[start_shcod+2])), match.start()))
                
        for match in re.finditer(b'\xac\x2c',self.bin_data):
            start_shcod = match.start()
            if ( self.bin_data[start_shcod+3] == 0xAA ):
                shellcode_presence.append(("LODSB/STOSB SUB decryption signature:{0}, SUB Key:{1}".format(hex(start_shcod), 
                    hex(self.bin_data[start_shcod+2])), match.start()))

        return shellcode_presence

